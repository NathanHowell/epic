EPIC4-1.2.0

*** News 03/23/2002 -- /DEFER now server sensitive
	When you do /DEFER <commands>, it will remember the current server
	and it will restore to that server when the commands are executed.
	At execution time, the commands will be run in the server's 
	"current window" (see immediately below) which may or may not be
	the current window when you did the /defer, but it will definitely
	be a window connected to the server!

*** News 03/23/2002 -- "Current window" tracking by server
	A new experimental feature is being added whereby each time you
	change the current window, it becomes its server's "current window".
	Since you can only have one current window per screen, but you can
	have more than one server connected per screen, epic may need to 
	know what the "current window" is for a server other than the 
	current window's server.  Is this confusing enough yet?  Well,
	think of it this way.  EPIC will keep track of the last window
	that was the current window for all of your servers.  Whenever
	EPIC needs to get a "current window" that is connected to a specific
	server, it can use this feature to find the last window that was
	a "current window" that is connected to the server.  This is not 
	an automatic thing; features will have to be converted to use this.
	Watch for updates.

*** News 03/23/2002 -- New /TIMER verb, /TIMER -DELETE_FOR_WINDOW <winref>
	If you do /TIMER -DELETE_FOR_WINDOW <winref> then all of the pending
	timers for window <winref> will be deleted.  You may want to do this
	before you destroy a window to make sure it's timers do not go off 
	in another window!

*** News 03/23/2002 -- New $serverctl() value, "MAXCACHESIZE"
	This value allows you to set the size of the largest channel for which
	userhost caching will be done.  If you set this to a non-negative
	number, only channels with up to this many values will do userhost
	caching.  If you set this value to 0, you will turn off userhost
	caching for this server, and if you set the value to a negative number
	you will enable userhost caching for all channels.  You may need to
	tweak this value on servers where doing a WHO #chan for a channel
	with an extremely large number of users will cause the server to
	flood you off.  Or if you just hate userhost caching.

	Examples:
	$serverctl(SET 0 MAXCACHESIZE 100)
		Don't do userhost caching for channels with more than 100
		users when you join on server 0.
	$serverctl(SET 2 MAXCACHESIZE 0)
		Don't do userhost caching for any channels on server 2.
	$serverctl(SET 2 MAXCACHESIZE -1)
		Turn userhost caching on for all channels on server 2.
	$serverctl(GET 2 MAXCACHESIZE)
		Return the maximum size of a channel on server 2 for 
		which userhost caching will be done.

*** News 03/23/2002 -- New window verbs to control scrollback
	Now you can scroll around in windows without needing to use the
	key bindings.

	/WINDOW SCROLL_BACKWARD
	/WINDOW SCROLL_BACKWARD <lines>
		If <lines> is 0 or is not provided, scroll back the default
		number of lines, otherwise scroll back the given number of
		lines.  Similar to SCROLL_BACKWARD keybinding.

	/WINDOW SCROLL_FORWARD
	/WINDOW SCROLL_FORWARD <lines>
		If <lines> is 0 or is not provided, scroll forward the default
		number of lines, otherwise scroll back the given number of
		lines.  Similar to SCROLL_FORWARD keybinding.

	/WINDOW SCROLL_START
		Go to the start (oldest line) of the scrollback buffer.
		Similar to SCROLL_START keybinding

	/WINDOW SCROLL_END
		Go to the end (newest line) of the scrollback buffer.
		Similar to SCROLL_END keybinding

*** News 03/23/2002 -- $loadinfo() extended
	The $loadinfo() function now returns the current loader as $2.
	You could use this to make sure that your script is being handled
	by the correct loader.  At the top of every PF script, put the 
	following line:
	   if (word(2 $loadinfo()) != [pf]) {LOAD -pf $word(1 $loadinfo())}
	This will resubmit your script to the PF loader if it is loaded with
	some other (incompatable) loader.

*** News 03/23/2002 -- New /LOADer, the Pre-Formatted Loader
	The new PF Loader can load pre-formatted scripts.  You can load a
	preformatted script with:
		/LOAD -PF filename

	The PF Loader is a high-performance, low-overhead loader that does
	not do any tasks for you.  It does not support C-like comments, it
	does not add semicolons for you at the ends of lines between commands,
	and it does not try to match up {'s and }'s to warn you of syntax
	errors.  Files that are preformatted and loaded with the PF loader
	should load significantly faster.

	See the doc/pf-loader file for a tutorial on how to convert your
	standard scripts to PF scripts.

*** News 03/23/2003 -- Changes to /LOAD
	On this date, the /LOAD command was reorganized.  The new LOADer
	is generalized and can use different loaders.  The following new
	arguments to /LOAD are supported:
		-STD  (default)		Load using the Standard EPIC loader
		-PF 			Load using the Pre-Formatted Loader
					(see above for more info)
	More loaders will be added in the future. 

*** News 03/18/2003 -- $dccctl() changes.
	Added $dccctl(xxx), where xxx is one of HELD, UNHELD, USERHOSTMATCH.
	Added $dccctl(get [ref] xxx) where xxx is one of USERHOST, SIZE.
	Added $dccctl(set [ref] xxx) where xxx is one of DESCRIPTION,
		FILENAME, USER, USERHOST, OTHERNAME, ENCRYPT.

	DCCs will record the current userhost taken from $userhost() (no
	args).  This will be used to set the same variable for message
	processing under dcc chats.  This isn't entirely useful at this point
	because if you initiate a dcc request from within any privmsg hook,
	where the userhost variable is correctly set, the request will be
	translated to a notice.  This is true even for dcc chats.

*** News 02/25/2003 -- Added %{1}D status variable.
	This acts exactly like %D, but is present on all windows where
	%D is present only on the window that has the DCC lastlog level.

*** News 02/25/2003 -- Added DCC hold mode.
	$dccctl(set [ref] held 1) puts a dcc session on hold.
	$dccctl(set [ref] held 0) releases the hold.

	When a dcc session is on hold, no data is sent to it or received
	from it until the hold is released.  This might be useful for
	bandwidth control or for granting priority to other unheld dccs.

*** News 02/17/2003 -- New function $findws().
	Similar to $findw() but returns _all_ matching words.

*** News 02/17/2003 -- New functions ${no}chhops() in the functions script.
	Returns halfops in a channel (or not) like $chops() and $nochops().

*** News 02/17/2003 -- New functions $finditems() and $ifinditems()
	These functions work much like $finditem() and $ifinditem() but
	they perform substring searches.  If the substring is found in the
	Karll array, then _a_ matching item/index number is returned.  If
	the substring is not found, the twos compliment (negative minus 1)
	of the (index) insertion point is returned.

*** News 02/17/2003 -- New function $dccctl()
	Introducing the newest member of our nice little family of
	bolt-ons, $dccctl(), which does many of the things related to DCC
	that are otherwise extremely difficult.

	$dccctl(refnums)	returns all open DCCs.
	$dccctl(get [refnum] [element])
	$dccctl(set [refnum] [element])
	$dccctl(typematch [pattern])
	$dccctl(descmatch [pattern])
	$dccctl(filematch [pattern])
	$dccctl(usermatch [pattern])
	$dccctl(othermatch [pattern])
	$dccctl(locked)		returns all locked dccs.

	[element] can be one of:
	refnum        $dccctl() reference number
	type           (get only)
	description    (get only)
	filename       (get only)
	user           (get only)
	othername      (get only)
	encrypt        (get only) (unused)
	filesize      size of the transfer (get only)
	resumesize    size that the transfer was resumed at (get only)
	readbytes     number of bytes xfered (get only)
	sentbytes     number of bytes xfered (get only)
	server        from which the dcc was triggered (get only)
	locked         (get only) (see below)
	remaddr       remote address (get only)
	locaddr       local address  (get only)
	starttime     of the transfer (get only)
	lasttime      ? (get only)

	Note that the refnum concept is new to DCC and applies only to
	$dccctl().  This is necessary to nail down exactly which DCC is
	being refered to, but it is no help trying to find the current
	dcc in a DCC_LIST hook for eg.  The best way to work with this is
	to use the "locked" keyword since epic locks a dcc before calling
	any hook refering to it.

	The *match sub-functions return the refnums of all matching DCCs.

*** News 02/06/2003 -- New functions in script/functions
	Did to $timerctl() what was done to $serverctl() a few pages down.
	As with that command, this will change the way that subcommands
	are selected in ambiguous cases.

*** News 02/06/2003 -- New functions in script/functions
	$min() and $max() (implemented elsewhere)
	$regpattern() simulates $pattern() with regexes.
	$regfilter() simulates $filter() with regexes.
	$index2wword() simulates $index2word() but ignores quotes.
	$jotm() for $jot()ing multiple ranges.
	$jotc() for $jot()ing character ranges.
	$maskm() simulates $mask() with multiple n!u@h args.
	$randn() returns multiple random numbers.
	$replace(xy y 1 2 3) returns "x1 x2 x3".
	$shuffle*() returns all arguments shuffled randomly.
	$uniqd() simulates the shell command "uniq -d".
	$wordn() emulates $word() but permits multiple word specs.
	$cut() simulates the "cut" shell command".
	$chvoices() returns voiced nicks on a channel.
	$chnovoices() returns unvoiced nicks on a channel.

*** News 02/03/2003 -- Implement /SET SUPPRESS_SERVER_MOTD in script
	If you were a previous user of /SET SUPPRESS_SERVER_MOTD ON,
	then you will want to add 
			load suppressmotd
	to your ~/.ircrc.  This re-implements this /SET.  And hopefully
	this script actually works, unlike the /SET.  If you have any
	problems, let me know, and I'll try to fix it.  If you want to
	try to improve it, please feel free and send me patches.

	Make sure you do a 'make install' before you report not being
	able to load this script as a bug!

*** News 02/03/2003 -- $logctl(REFNUMS [ACTIVE|INACTIVE|ALL])
	You can now do the following things with logfiles:
		$logctl(REFNUMS ACTIVE)
			returns all ACTIVE (on) logfiles
		$logctl(REFNUMS INACTIVE)
			returns all INACTIVE (off) logfiles
		$logctl(REFNUMS ALL)
			returns all logfiles

*** News 02/03/2003 -- Logs now keep track of "last written time"
	Each logfile now has an "activity timer" which is reset when
	you first create the logfile, when you turn it on, or when you
	turn it off, or when any output is written to the logfile.
	You can work with this timer in the following ways:

		$logctl(GET <refnum> ACTIVITY)
			returns the last time the logfile was written to
		$logctl(SET <refnum> ACTIVITY)
			resets the log file's activity timer to current time
		/LOG <refnum> ACTIVITY
			resets the log file's activity timer to current time

*** News 02/03/2003 -- "Larnifications" to epic's server handling code
	Traditionally, ircII clients have trusted the server to send
	well formed data.  If messages from the server were badly formed
	(for example, if arguments were missing or in the wrong order),
	ircII clients (including epic of course) would crash.  Due to the
	repeated requests of some server developers, and particularly 
	because of larne, who used to make sport of epic by modifying his
	server to send numeric garbage at epic to make it crash, a long
	and substantial project to rewrite all of the code that handles
	messages from the server has been undertaken.  This marks the end
	of the first stage of the project, which protects epic from the
	server sending not enough arguments, which would cause a crash.
	Internally, I have referred to this as the "larnification project"
	in honor of larne, the person who pushed me over the edge into 
	doing this sooner rather than later.  I got his consent to use his
	nickname like this, so please don't think I'm making fun of him.
	For history's sake, this is an offshoot of the previous project
	which was called "Larneproofing" which was a band-aid to prevent
	most of the obvious problems caused by server's sending bad data.
	This was a full rewrite of the protocol-handling code.

*** News 02/03/2003 -- Changes to how and when notifies are done
	Previously, NOTIFY events always occured at the top of every minute,
	along with other things like the updating of the system clock and
	/on timer.  But now NOTIFY has been broken off into its own separate
	timer whose interval is controlled by /SET NOTIFY_INTERVAL (see below).
	How this will work is that each notify event will occur precisely
	/SET NOTIFY_INTERVAL seconds apart, except for the following cases!

	*) When the client starts up, the first notify event occurs at the
	   top of the next minute *without regard to whatever the original
	   value of /SET NOTIFY_INTERVAL is!*  After this first notify 
	   event, the normal rules apply.
	*) When you enter CPU_SAVER mode, the next notify event will occur 
	   at its regular scheduled time, but subsequent notify events will
	   occur at /SET CPU_SAVER_EVERY intervals!  (IE, /SET CPU_SAVER_EVERY
	   overrides /SET NOTIFY_INTERVAL when you're in cpu saver mode)
	*) When you leave CPU_SAVER mode, the next notify event will occur
	   at the top of the next minute *without regard to whatever value
	   of /set notify_interval!  After the top of the next minute, the
	   regular rules apply.

	These rules are needed to maintain as much backwards compatability
	as much as possible for most users, who will not change anything.

*** News 02/03/2003 -- Changes to /SET NOTIFY_INTERVAL
	There is a new #define in config.h, #define MINIMUM_NOTIFY_INTERVAL
	which is an integer value that sets the minimum permissable value
	of /SET NOTIFY_INTERVAL.  If you attempt to /SET to a lower value,
	it will be change to the minimum value.  The default value is 60,
	and you can change it in config.h if you wish.

*** News 02/03/2003 -- Changes to /ON WINDOW_KILL
	Previously, /ON WINDOW_KILL provided the window's "name or refnum"
	as $0.  But if you wanted to get the refnum, you couldn't because
	the window had already been destroyed.  So /ON WINDOW_KILL has been
	extended so $1 is always the window's refnum:
		$0	Window's "name or refnum"
		$1	Window's refnum

*** News 01/30/2003 -- $serverctl() general cleanup.
	subcommands will be matched against as many characters as are
	supplied.  This means that $serverctl(get 4 007) will not call the
	005 subcommand for eg, but also that in ambiguous cases, the first
	matching subcommand is used where they may not have been before.

*** News 01/30/2003 -- $serverctl(?match *pattern*) does wildcard matching.
	gmatch will return all servers matching group *pattern*.
	imatch will return all servers matching (its) server name *pattern*.
	omatch will return all servers matching (our) server name *pattern*.
	match was never implemented and has been removed.
	pmatch was never implemented and has been removed.

*** News 01/30/2003 -- $serverctl(max)
	$serverctl(max) now returns the number of _slots_ in the server
	list.  Note that this currently equates to the largest number
	of servers in the list at any one time.  It doesn't shrink if
	you delete servers.

*** News 01/30/2003 -- $afterw(), $beforew(), $fromw(), $tow()..
	WARNING:  Incompatible change.  If you experience problems
	because of this change, you should notify #epic on efnet.

	These functions will now do fixed string matching rather than
	pattern matching.  I figure that the old method of implementing
	these functions is fundamentally flawed, and not useful for real
	world applications.  Examination of many publicly available
	scripts seems to indicate that these functions are avoided and
	that where they are used, they constitute latent bugs since text
	matching is desired.

*** News 01/30/2003 -- $writeb() dequotes data.
	This makes it capable of writing binary data.
	$writeb($writefd $read($readfd $numbytes)) will copy $numbytes
	of binary data from one FD to the other faithfully.

*** News 01/30/2003 -- Subsecond /sleep.
	/sleep now accepts floating point arguments.  This makes it much
	the same as /usleep which accepts integer microsecond values,
	but not entirely.

*** News 12/23/2002 -- /exec options tuned.
	-line, -linepart, -error and -errorpart can now be changed for a
	process on the fly, using %process like the other options.

	Using the -window option will now nail the process to the server
	too.

*** News 12/23/2002 -- $xdebug() now accepts masks.

*** News 12/23/2002 -- /redir tuned
	/redir now permits raw dccs to be used.  Also, when used outside
	of the command line script, the $* arguments will now be available.

*** News 12/23/2002 -- New /set, /set FLOATING_POINT_PRECISION
	This sets the number of decimal places of the results of floating
	point math.  Note that this makes FLOATING_POINT_MATH redundant.

# End of file
